" --------------------------------------------------------------------------------------------------------
" An example for a vimrc file.									" vimrc 文件例子
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc
" --------------------------------------------------------------------------------------------------------
" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif
" --------------------------------------------------------------------------------------------------------
" This must be first, because it changes other options as a side effect.
set nocompatible												" 使vim不模仿vi模式，不然有兼容性问题
" --------------------------------------------------------------------------------------------------------
set backspace=indent,eol,start									" 允许退格键删除行首空白，换行符和插入模式开始处之前的字符
set tabstop=4													" 设置tab长度为4
set shiftwidth=4												" 设置自动缩进为4
" --------------------------------------------------------------------------------------------------------
if has("vms")													" 覆盖文件时备份，VMS系统除外，VMS自动会产生备份
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
" --------------------------------------------------------------------------------------------------------
set history=50		" keep 50 lines of command line history		" 保存的命令数量和查找模式历史数量
set ruler		" show the cursor position all the time			" 右下角显示当前光标位置
set showcmd		" display incomplete commands					" 显示未完成的命令，光标位置旁边
set incsearch		" do incremental searching					" 搜索时逐字符高亮
" --------------------------------------------------------------------------------------------------------
" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting						" 5.0版本以前Q的作用，若无，将启动Ex模式					
map Q gq									

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>
" --------------------------------------------------------------------------------------------------------
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a													" 启用鼠标
endif
" --------------------------------------------------------------------------------------------------------
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")								" 有色彩的时候才生效
  syntax on														" 语法高亮
  set hlsearch													" 搜索高亮
endif
" --------------------------------------------------------------------------------------------------------
" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on										" 根据文件类型进行缩进,用于语法高亮，文件插件和缩进文件

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  " autocmd FileType text 定义个自动命令，文件类型被设置为text时，后面命令自动执行
  autocmd FileType text setlocal textwidth=78					" 文本文件一行长于78字符时自动换行

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else
  set autoindent		" always set autoindenting on			" 开启智能缩进,继承前一行缩进方式
endif " has("autocmd")
" --------------------------------------------------------------------------------------------------------
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
" --------------------------------------------------------------------------------------------------------
" ========================================================================================================
" --------------------------------------------------------------------------------------------------------
set nu															" 显示行号
" --------------------------------------------------------------------------------------------------------
"Set mapleader							
let mapleader = ","												" 设置映射前导为 ，

"Fast reloading of the .vimrc									" 快速执行.vimrc
map <silent> <leader>ss :source ~/.vimrc<cr>			
"Fast editing of .vimrc											" 快速编辑.vimrc		
map <silent> <leader>ee :e ~/.vimrc<cr>				
"When .vimrc is edited, reload it
autocmd! bufwritepost .vimrc source ~/.vimrc					" 每次编辑.vimrc后，自动执行 .vimrc
" --------------------------------------------------------------------------------------------------------
" ========================================================================================================
" Platform 区分不同的平台，以进行不同的配置 
function! MySys()
  if has("win32")
    return "windows"
  else
    return "linux"
  endif
endfunction
" ------------------------------------------------------------------------------------
" 新建标签页进行编辑本文件
function! SwitchToBuf(filename)
    "let fullfn = substitute(a:filename, "^\\~/", $HOME . "/", "")
    "find in current tab
    let bufwinnr = bufwinnr(a:filename)
    if bufwinnr != -1
    	exec bufwinnr . "wincmd w"
        return
    else
    	"find in each tab
        tabfirst
        let tab = 1
        while tab <= tabpagenr("$")
            let bufwinnr = bufwinnr(a:filename)
            if bufwinnr != -1
    	        exec "normal " . tab . "gt"
	        exec bufwinnr . "wincmd w"
    	        return
            endif
            tabnext
            let tab = tab + 1
        endwhile
        "not exist, new tab
        exec "tabnew " . a:filename
    endif
endfunction
" ------------------------------------------------------------------------------------
" 快速编辑和导入本文件    " Fast edit vimrc
if MySys() == 'linux'
    "Fast reloading of the .vimrc
    map <silent> <leader>ss :source ~/.vimrc<cr>
    "Fast editing of .vimrc
    map <silent> <leader>ee :call SwitchToBuf("~/.vimrc")<cr>
    "When .vimrc is edited, reload it
    autocmd! bufwritepost .vimrc source ~/.vimrc
elseif MySys() == 'windows'
    "Set helplang
    set helplang=cn
    "Fast reloading of the _vimrc
    map <silent> <leader>ss :source ~/_vimrc<cr>
    "Fast editing of _vimrc
    map <silent> <leader>ee :call
    SwitchToBuf("~/_vimrc")<cr>
    "When _vimrc is edited, reload it
    autocmd! bufwritepost _vimrc
    source ~/_vimrc
endif
" For windows version
if MySys() == 'windows'
    source $VIMRUNTIME/mswin.vim
    behave mswin
endif
" ------------------------------------------------------------------------------------
" 文件浏览器
let g:netrw_winsize = 15
nmap <silent> <leader>fe :Sexplore!<cr>
" ------------------------------------------------------------------------------------
" ========================================================================================================
